from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

import json
from datetime import datetime

DATA_FILE = 'data.json'
CONFIG_FILE = 'config.json'

def load_config():
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "receiver": {
                "user_id": "",
                "name": "",
                "score": 0,
                "actions": []
            },
            "history": []
        }

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
async def award(update: Update, context: ContextTypes.DEFAULT_TYPE, points: int, reason: str, extra: str = None):
    user_id = update.effective_user.id
    config = load_config()
    data = load_data()

    if user_id not in config["admins"]:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    data["score"] += points
    data["actions"].append({
        "from": user_id,
        "points": points,
        "reason": reason,
        "time": datetime.now().isoformat()
    })

    save_data(data)
    await update.message.reply_text(f"–Ø—Ä–æ—Å–ª–∞–≤ –ø–æ–ª—É—á–∏–ª {points:+} –±–∞–ª–ª–æ–≤ –∑–∞: {reason}")

    if extra:
        await update.message.reply_text(extra)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def morn_routine(update, context): await award(update, context, +1, "—É—Ç—Ä–µ–Ω–Ω—é—é —Ä—É—Ç–∏–Ω—É", extra="—Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
async def self_room(update, context): await award(update, context, +2, "—É–±–æ—Ä–∫—É –∫–æ–º–Ω–∞—Ç—ã")
async def kitchen(update, context): await award(update, context, +2, "—É–±–æ—Ä–∫—É –∫—É—Ö–Ω–∏")
async def sport(update, context): await award(update, context, +2, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç –Ω–æ—Ä–º—ã –¥–Ω—è")
async def chapter(update, context): await award(update, context, +1, "–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é –≥–ª–∞–≤—É –∫–Ω–∏–≥–∏")
async def self_initiated(update, context): await award(update, context, +3, "–ø–æ–º–æ—â—å —Å–µ–º—å–µ –±–µ–∑ –ø—Ä–æ—Å—å–±—ã")
async def brain_trained(update, context): await award(update, context, +1, "—Ä–∞–∑–≤–∏—Ç–∏–µ —É–º–∞")
async def perfect_kid(update, context): await award(update, context, +1, "–≤–µ–ª_—Å–µ–±—è_–æ–±—Ä–∞–∑—Ü–æ–≤–æ")
async def poop(update, context): await award(update, context, +1, "—É–±–æ—Ä–∫—É –≤—ã–±—Ä–æ—Å–æ–≤ –∫–æ—Ç–∞", extra = "–ú–∞—Ä—Å–µ–ª—å –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å, –æ –±–ª—é—Å—Ç–∏—Ç–µ–ª—å –ª–æ—Ç–∫–æ–≤–æ–π —á–∏—Å—Ç–æ—Ç—ã! –ú—è—É üòª")
async def orator1(update, context): await award(update, context, +1, "—Ö–æ—Ä–æ—à–µ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–ª—É—Ö", extra = "–Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, —Å—ç—Ä")
async def orator2(update, context): await award(update, context, +2, "–æ—Ç–ª–∏—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–ª—É—Ö", extra = "–º–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, —Å—ç—Ä")

async def rowdiness(update, context): await award(update, context, -2, "—É–ø—Ä—è–º—Å—Ç–≤–æ")
async def ignored(update, context): await award(update, context, -1, "–∏–≥–Ω–æ—Ä –ø—Ä–æ—Å—å–±—ã > 10–º–∏–Ω")
async def conflict(update, context): await award(update, context, -3, "–∫–æ–Ω—Ñ–ª–∏–∫—Ç")
async def stroke(update, context): await award(update, context, -2, "–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–µ–ª –Ω–∞ –¥–µ–Ω—å")
async def brainroot(update, context): await award(update, context, -1, "—Å–∏–¥–µ–ª/–ª–µ–∂–∞–ª –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–≤ —Ü–µ–ª—å –¥–Ω—è")

# –ò—Ç–æ–≥ –¥–Ω—è
async def itog_dnya(update, context):
    data = load_data()
    msg = "üèÅ *–ò—Ç–æ–≥ –¥–Ω—è:*\n"
    for uid, info in data["users"].items():
        msg += f"{info['name']}: {info['score']} –±–∞–ª–ª–æ–≤\n"
    await update.message.reply_text(msg, parse_mode="Markdown")

# –ó–∞ —á—Ç–æ
async def za_chto(update, context):
    data = load_data()
    msg = "üìã *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π:*\n"
    for record in data["history"][-20:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
        user = data["users"].get(record["user_id"], {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})
        msg += f"{user['name']}: {record['points']} –∑–∞ {record['reason']}\n"
    await update.message.reply_text(msg, parse_mode="Markdown")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token("8058566086:AAGPqbG5ulEw2DIrBWW5CQCHcQPJ6AflxRo").build()

    app.add_handler(CommandHandler("results", itog_dnya))
    app.add_handler(CommandHandler("why", za_chto))

    app.add_handler(CommandHandler("morning_routine", morn_routine))
    app.add_handler(CommandHandler("room_is_clean", self_room))
    app.add_handler(CommandHandler("kitchen_is_clean", kitchen))
    app.add_handler(CommandHandler("sport", sport))
    app.add_handler(CommandHandler("chapter", chapter))
    app.add_handler(CommandHandler("self_initiated", self_initiated))
    app.add_handler(CommandHandler("brain_trained", brain_trained))
    app.add_handler(CommandHandler("perfect_kid", perfect_kid))
    app.add_handler(CommandHandler("cat_poop", poop))
    app.add_handler(CommandHandler("speaker_1", orator1))
    app.add_handler(CommandHandler("speaker_2", orator2))

    app.add_handler(CommandHandler("rowdiness", rowdiness)) #—É–ø—Ä—è–º—Å—Ç–≤–æ
    app.add_handler(CommandHandler("ignored", ignored)) #–∏–≥–Ω–æ—Ä –ø—Ä–æ—Å—å–±—ã > 10–º–∏–Ω
    app.add_handler(CommandHandler("conflict", conflict)) #–≥—Ä—É–±–æ—Å—Ç—å/–∫–∞–ø—Ä–∏/—Å–ø–æ—Ä
    app.add_handler(CommandHandler("stroke", stroke)) #–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–µ–ª –Ω–∞ –¥–µ–Ω—å
    app.add_handler(CommandHandler("brain_root", brainroot)) #—Å–∏–¥–µ–ª/–ª–µ–∂–∞–ª –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–≤ —Ü–µ–ª—å –¥–Ω—è

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()